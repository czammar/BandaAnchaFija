BAF_study <- BAF_study %>% mutate_all(~replace(., is.na(.), 0))
# Renombramos columnas de accesos segun su tecnologia
names(BAF_study)[8] <- "CABLE_COAXIAL"
names(BAF_study)[9] <- "DSL"
names(BAF_study)[10] <- "FIBRA_OPTICA"
names(BAF_study)[11] <- "SATELITAL"
names(BAF_study)[12] <- "TERRESTRE_FIJO_INALAMBRICO"
names(BAF_study)[13] <- "OTRAS_TECNOLOGIAS"
names(BAF_study)[14] <- "SIN_TECNOLOGIA_ESPECIFICADA"
# Agregamos columna de todos los accesos del municipio
BAF_study <- BAF_study %>% mutate(ALL_ACCESS = CABLE_COAXIAL+DSL+FIBRA_OPTICA+SATELITAL+TERRESTRE_FIJO_INALAMBRICO+OTRAS_TECNOLOGIAS+SIN_TECNOLOGIA_ESPECIFICADA)
# Agregamos columna de todos los accesos cable coaxial y fibra optica del municipio
BAF_study <- BAF_study %>% mutate(COAX_FO = CABLE_COAXIAL+FIBRA_OPTICA)
BAF_062019 <-  subset(BAF_study, ANIO == "2019" & MES == "06" )
View(BAF_062019)
BAF_062019 <-  subset(BAF_study, ANIO == "2019" & MES == "06" & K_MUNICIPIO !== "999" )
BAF_062019 <-  subset(BAF_study, ANIO == "2019" & MES == "06" & K_MUNICIPIO != "999" )
View(BAF_062019)
BAF_062019 <-  subset(BAF_study, ANIO == "2019" & MES == "06" & K_ENTIDAD != "99"  & K_MUNICIPIO != "999" )
View(BAF_062019)
library(readr)
library(dplyr)
library(ggplot2)
#library("tidyverse")
######---- Carga base de datos de accesos de banda ancha fija ----######
BAF_raw <- read_csv("TODO_BAF/TD_ACC_BAF_ITE_VA.csv",
col_types = cols(ANIO = col_character(),
K_ACCESO_INTERNET = col_character(),
K_ENTIDAD = col_character(), K_MUNICIPIO = col_character(),
MES = col_character()), locale = locale(encoding = "ISO-8859-1"))
######---- Transformacion y limpieza de la base de accesos ----#####
## Crea una llave para cruzar con las otras bases
BAF_study <- BAF_raw
BAF_study$K_MUNICIPIO <- substr(BAF_study$K_MUNICIPIO,3,5)
BAF_study <- BAF_study  %>% mutate(K_ENTIDAD_MUNICIPIO = paste(K_ENTIDAD, K_MUNICIPIO, sep = ""))
## seleccion variable y alarga la bases de accesos por tecnologia
BAF_study <- BAF_study %>%
select(K_ENTIDAD_MUNICIPIO, K_ENTIDAD, K_MUNICIPIO, ANIO, MES, CONCESIONARIO, EMPRESA, K_ACCESO_INTERNET, A_TOTAL_E) %>% spread(K_ACCESO_INTERNET, A_TOTAL_E)
## El detalle de accesos a nivel municipal con NA se imputa con cero
BAF_study <- BAF_study %>% mutate_all(~replace(., is.na(.), 0))
# Renombramos columnas de accesos segun su tecnologia
names(BAF_study)[8] <- "CABLE_COAXIAL"
names(BAF_study)[9] <- "DSL"
names(BAF_study)[10] <- "FIBRA_OPTICA"
names(BAF_study)[11] <- "SATELITAL"
names(BAF_study)[12] <- "TERRESTRE_FIJO_INALAMBRICO"
names(BAF_study)[13] <- "OTRAS_TECNOLOGIAS"
names(BAF_study)[14] <- "SIN_TECNOLOGIA_ESPECIFICADA"
# Agregamos columna de todos los accesos del municipio
BAF_study <- BAF_study %>% mutate(ALL_ACCESS = CABLE_COAXIAL+DSL+FIBRA_OPTICA+SATELITAL+TERRESTRE_FIJO_INALAMBRICO+OTRAS_TECNOLOGIAS+SIN_TECNOLOGIA_ESPECIFICADA)
# Agregamos columna de todos los accesos cable coaxial y fibra optica del municipio
BAF_study <- BAF_study %>% mutate(COAX_FO = CABLE_COAXIAL+FIBRA_OPTICA)
# Se excluyen los datos de accesos que no tienen ubicacion de municipio
BAF_062019 <-  subset(BAF_study, ANIO == "2019" & MES == "06" & K_ENTIDAD != "99"  & K_MUNICIPIO != "999" )
####---- Resumenes
# # Tabla resumen de conexiones por anio
# year_resume <- BAF_raw %>% select(ANIO, MES, A_TOTAL_E) %>% group_by(ANIO,MES) %>%
#   summarize(n=sum(A_TOTAL_E,na.rm = TRUE)/1000000) %>% ungroup()
#
# year_resume <- mutate(year_resume, key_yearmonth = paste(year_resume$ANIO, year_resume$MES,sep = ""))
#
# #ggplot(year_resume, aes(key_yearmonth, n)) + geom_bar(stat = "identity")
#
# # Tabla resumen de conexiones por anio, con desagregacion de tecnologia
# technology_resume<-BAF_raw %>% select(ANIO, MES, K_ACCESO_INTERNET, TECNO_ACCESO_INTERNET, A_TOTAL_E) %>% group_by(ANIO, MES, K_ACCESO_INTERNET, TECNO_ACCESO_INTERNET) %>%
#   summarize(n=sum(A_TOTAL_E,na.rm = TRUE)/1000000) %>% ungroup()
View(BAF_062019)
write_csv(BAF_062019, "../BAF_06209.csv")
getwd()
write_csv(BAF_062019, "BAF_06209.csv")
library(readr)
inafed_clean <- read_csv("INAFED/inafed_clean.csv",
locale = locale(encoding = "ISO-8859-1"))
View(inafed_clean)
View(inafed_clean)
library(readr)
library(dplyr)
######---- Carga base de datos de poblacion del inafed ----######
inafed_clean <- read_csv("INAFED/inafed_clean.csv")
View(inafed_clean)
library(tidyverse)
glimpse(inafed_clean)
names(inafed_clean)
View(inafed_clean)
INAFED <- INAFED %>% select("cve_inegi","id_estado","id_municipio","superficie")
INAFED <- read_csv("INAFED/inafed_clean.csv")
INAFED <- INAFED %>% select("cve_inegi","id_estado","id_municipio","superficie")
View(INAFED)
View(inafed_clean)
rm(inafed_clean)
rm(INAFED)
INAFED <- read_csv("INAFED/inafed_clean.csv") %>% select("cve_inegi","id_estado","id_municipio","superficie")
View(INAFED)
library(readr)
library(dplyr)
######---- Carga base de datos de poblacion del inafed ----######
INAFED <- read_csv("INAFED/inafed_clean.csv") %>%
select("cve_inegi","id_estado","id_municipio","superficie")
View(INAFED)
View(INAFED)
View(BAF_raw)
View(BAF_062019)
library(readr)
library(dplyr)
######---- Carga base de datos de poblacion del inafed seleccionando datos de superficie----######
INAFED <- read_csv("INAFED/inafed_clean.csv") %>%
select("cve_inegi","id_estado","id_municipio","superficie")
# Acotamos la seleccion a datos por municipio (i.e sin resumenes por estado/pais)
INAFED <- subset(INAFED, id_muncipio != "0")
INAFED <- INAFED %>%  select("cve_inegi","superficie")
# Escribe la base de superficies
write_csv(INAFED, "INAFED_surface.csv")
library(readr)
library(dplyr)
######---- Carga base de datos de poblacion del inafed seleccionando datos de superficie----######
INAFED <- read_csv("INAFED/inafed_clean.csv") %>%
select("cve_inegi","id_estado","id_municipio","superficie")
# Acotamos la seleccion a datos por municipio (i.e sin resumenes por estado/pais)
INAFED <- subset(INAFED, id_muncipio != "0")
INAFED <- INAFED %>%  select("cve_inegi","superficie")
library(readr)
library(dplyr)
######---- Carga base de datos de poblacion del inafed seleccionando datos de superficie----######
INAFED <- read_csv("INAFED/inafed_clean.csv") %>%
select("cve_inegi","id_estado","id_municipio","superficie")
View(INAFED)
INAFED <- subset(INAFED, id_muncipio != "0")
View(INAFED)
library(readr)
library(dplyr)
######---- Carga base de datos de poblacion del inafed seleccionando datos de superficie----######
INAFED <- read_csv("INAFED/inafed_clean.csv") %>%
select("cve_inegi","id_estado","id_municipio","superficie")
# Acotamos la seleccion a datos por municipio (i.e sin resumenes por estado/pais)
INAFED <- subset(INAFED, id_municipio != "0")
INAFED <- INAFED %>%  select("cve_inegi","superficie")
# Escribe la base de superficies
write_csv(INAFED, "INAFED_surface.csv")
View(INAFED)
library(readr)
library(dplyr)
######---- Carga base de datos de poblacion del inafed seleccionando datos de superficie----######
INAFED <- read_csv("INAFED/inafed_clean.csv") %>%
select("cve_inegi","id_estado","id_municipio","superficie")
View(INAFED)
library(readr)
library(dplyr)
######---- Carga base de datos de poblacion del inafed seleccionando datos de superficie----######
INAFED <- read_csv("INAFED/inafed_clean.csv")
View(INAFED)
getwd()
ls
example <- read.xls("/media/Box/Aprendizaje_Maquina/Projecto/Intercensal2015/01_poblacion_ags.xls",sheet=2)
library(readxl)
test<-read_excel("/media/Box/Aprendizaje_Maquina/Projecto/Intercensal2015/01_poblacion_ags.xls", sheet = 2, col_names = FALSE, col_types = NULL, na = "", skip = 10)
View(test)
test<-read_excel("/media/Box/Aprendizaje_Maquina/Projecto/Intercensal2015/01_poblacion_ags.xls", sheet = 3, col_names = FALSE, col_types = NULL, na = "", skip = 10)
library(readxl)
test<-read_excel("/Intercensal2015/01_poblacion_ags.xls", sheet = 3, col_names = FALSE, col_types = NULL, na = "", skip = 10)
test<-read_excel("Intercensal2015/01_poblacion_ags.xls", sheet = 3, col_names = FALSE, col_types = NULL, na = "", skip = 10)
?read_excel
View(test)
colnames(test)<- c("Entidad","Municipio","Sexo_jefe","Hogares/Poblacion_hogares","Estimador","Hogares_y_su_poblacion","X7","X8","X9","X10","X11","X12","X13","X14","X15")
colnames(test)<- c("X1","X2","X3","X4","X5","X6","X7","X8","X9","X10")
colnames(test)<- c("X1","X2","X3","X4","X5","X6","X7")
View(test)
library(readxl)
ags <-read_excel("Intercensal2015/01_poblacion_ags.xls", sheet = 3, col_names = FALSE, col_types = NULL, na = "", skip = 10)
colnames(test)<- c("X1","X2","X3","X4","X5","X6","X7")
test<- subset(test, X2 != "Total", X3 == "Total", X4 == "Valor")
library(readxl)
ags <-read_excel("Intercensal2015/01_poblacion_ags.xls", sheet = 3, col_names = FALSE, col_types = NULL, na = "", skip = 10)
colnames(test)<- c("X1","X2","X3","X4","X5","X6","X7")
test<- subset(test, X2 != "Total", X3=="Total")
View(test)
library(readxl)
ags <-read_excel("Intercensal2015/01_poblacion_ags.xls", sheet = 3, col_names = FALSE, col_types = NULL, na = "", skip = 10)
colnames(test)<- c("X1","X2","X3","X4","X5","X6","X7")
library(readxl)
ags <-read_excel("Intercensal2015/01_poblacion_ags.xls", sheet = 3, col_names = FALSE, col_types = NULL, na = "", skip = 10)
colnames(ags)<- c("X1","X2","X3","X4","X5","X6","X7")
subset(ags, X2 != "Total", X3=="Total")
library(readxl)
ags <-read_excel("Intercensal2015/01_poblacion_ags.xls", sheet = 3, col_names = FALSE, col_types = NULL, na = "", skip = 10)
colnames(ags)<- c("X1","X2","X3","X4","X5","X6","X7")
ags<-subset(ags, X2 != "Total", X3=="Total", X4=="Valor")
library(readxl)
ags <-read_excel("Intercensal2015/01_poblacion_ags.xls", sheet = 3, col_names = FALSE, col_types = NULL, na = "", skip = 10)
colnames(ags)<- c("X1","X2","X3","X4","X5","X6","X7")
#ags<-subset(ags, X2 != "Total", X3=="Total", X4=="Valor")
View(ags)
library(readxl)
ags <-read_excel("Intercensal2015/01_poblacion_ags.xls", sheet = 3, col_names = FALSE, col_types = NULL, na = "", skip = 10)
colnames(ags)<- c("X1","X2","X3","X4","X5","X6","X7")
View(ags)
ags$X2[1]
ags<-subset(ags, ags$X2!="Total", ags$X3=="Total")
library(readxl)
ags <-read_excel("Intercensal2015/01_poblacion_ags.xls", sheet = 3, col_names = FALSE, col_types = NULL, na = "", skip = 10)
colnames(ags)<- c("X1","X2","X3","X4","X5","X6","X7")
ags<-subset(ags, X2 != "Total", X3=="Total")
library(readxl)
ags <-read_excel("Intercensal2015/01_poblacion_ags.xls", sheet = 3, col_names = FALSE, col_types = NULL, na = "", skip = 10)
colnames(ags)<- c("X1","X2","X3","X4","X5","X6","X7")
ags<-subset(ags, X2 != "Total")
View(ags)
library(readxl)
ags <-read_excel("Intercensal2015/01_poblacion_ags.xls", sheet = 3, col_names = FALSE, col_types = NULL, na = "", skip = 10)
colnames(ags)<- c("X1","X2","X3","X4","X5","X6","X7")
ags<-subset(ags, X2 != "Total" & X3 == "Total" & X4 == "Valor")
View(ags)
left_path = "Intercensal2015/01_poblacion_"
paste0(left_path,"ags.xls")
right_path = ".xls"
paste0(left_path,"ags",right_path)
View(ags)
ags %>% select(X1,X2,X5)
library(tidyverse)
ags %>% select(X1,X2,X5)
name_state = "ags"
ags <-read_excel(paste0(left_path,name_state,right_path), sheet = 3, col_names = FALSE, col_types = NULL, na = "", skip = 10)
colnames(ags)<- c("X1","X2","X3","X4","X5","X6","X7")
library(readxl)
library(tidyverse)
left_path = "Intercensal2015/01_poblacion_"
right_path = ".xls"
name_state = "ags"
# Carga el archivo con el path descrito
test <-read_excel(paste0(left_path,name_state,right_path), sheet = 3, col_names = FALSE, col_types = NULL, na = "", skip = 10)
# Nombres temporales de las variables
colnames(test)<- c("X1","X2","X3","X4","X5","X6","X7")
# Filtrado para obtener datos de poblacion en municipios
test<-subset(test, X2 != "Total" & X3 == "Total" & X4 == "Valor")
# seleccion de variables de estado, municipio y poblacion
test<- test %>% select(X1,X2,X5)
colnames(test)<- c("K_ESTADO","K_MUNICIPIO","POBLACION")
View(test)
rm(ags)
View(test)
test$K_ESTADO <- substr(test$K_ESTADO,1,2)
View(test)
test$K_MUNICIPIO<- substr(test$K_MUNICIPIO,1,3)
View(test)
View(BAF_062019)
test %>% mutate(K_ENTIDAD_MUNICIPIO = paste(K_ESTADO, K_MUNICIPIO))
library(readxl)
library(tidyverse)
left_path = "Intercensal2015/01_poblacion_"
right_path = ".xls"
name_state = "ags"
# Carga el archivo con el path descrito
test <-read_excel(paste0(left_path,name_state,right_path), sheet = 3, col_names = FALSE, col_types = NULL, na = "", skip = 10)
# Nombres temporales de las variables
colnames(test)<- c("X1","X2","X3","X4","X5","X6","X7")
# Filtrado para obtener datos de poblacion en municipios
test<-subset(test, X2 != "Total" & X3 == "Total" & X4 == "Valor")
# seleccion de variables de estado, municipio y poblacion
test<- test %>% select(X1,X2,X5)
# Renombra las columnas
colnames(test)<- c("K_ESTADO","K_MUNICIPIO","POBLACION")
# Obtiene claves de identificacion de estado y municipio
test$K_ESTADO <- substr(test$K_ESTADO,1,2)
test$K_MUNICIPIO<- substr(test$K_MUNICIPIO,1,3)
# Crea nueva variable
test %>% mutate(K_ENTIDAD_MUNICIPIO = paste(K_ESTADO, K_MUNICIPIO, sep=""))
library(readxl)
library(tidyverse)
left_path = "Intercensal2015/01_poblacion_"
right_path = ".xls"
name_state = "ags"
# Carga el archivo con el path descrito
test <-read_excel(paste0(left_path,name_state,right_path), sheet = 3, col_names = FALSE, col_types = NULL, na = "", skip = 10)
# Nombres temporales de las variables
colnames(test)<- c("X1","X2","X3","X4","X5","X6","X7")
# Filtrado para obtener datos de poblacion en municipios
test<-subset(test, X2 != "Total" & X3 == "Total" & X4 == "Valor")
# seleccion de variables de estado, municipio y poblacion
test<- test %>% select(X1,X2,X5)
# Renombra las columnas
colnames(test)<- c("K_ENTIDAD","K_MUNICIPIO","POBLACION")
# Obtiene claves de identificacion de estado y municipio
test$K_ENTIDAD <- substr(test$K_ENTIDAD,1,2)
test$K_MUNICIPIO<- substr(test$K_MUNICIPIO,1,3)
# Crea nueva variable con clave
test %>% mutate(K_ENTIDAD_MUNICIPIO = paste(K_ENTIDAD, K_MUNICIPIO, sep=""))
library(readxl)
library(tidyverse)
left_path = "Intercensal2015/01_poblacion_"
right_path = ".xls"
name_state = "ags"
# Carga el archivo con el path descrito
test <-read_excel(paste0(left_path,name_state,right_path), sheet = 3, col_names = FALSE, col_types = NULL, na = "", skip = 10)
# Nombres temporales de las variables
colnames(test)<- c("X1","X2","X3","X4","X5","X6","X7")
# Filtrado para obtener datos de poblacion en municipios
test<-subset(test, X2 != "Total" & X3 == "Total" & X4 == "Valor")
# seleccion de variables de estado, municipio y poblacion, para renombrarlas
test<- test %>% select(X1,X2,X5)
colnames(test)<- c("K_ENTIDAD","K_MUNICIPIO","POBLACION")
# Obtiene claves de identificacion de estado y municipio
test$K_ENTIDAD <- substr(test$K_ENTIDAD,1,2)
test$K_MUNICIPIO<- substr(test$K_MUNICIPIO,1,3)
# Crea nueva variable con clave y
test %>% mutate(K_ENTIDAD_MUNICIPIO = paste(K_ENTIDAD, K_MUNICIPIO, sep=""))
test %>% select(K_ENTIDAD_MUNICIPIO, POBLACION)
library(readxl)
library(tidyverse)
left_path = "Intercensal2015/01_poblacion_"
right_path = ".xls"
name_state = "ags"
# Carga el archivo con el path descrito
test <-read_excel(paste0(left_path,name_state,right_path), sheet = 3, col_names = FALSE, col_types = NULL, na = "", skip = 10)
# Nombres temporales de las variables
colnames(test)<- c("X1","X2","X3","X4","X5","X6","X7")
# Filtrado para obtener datos de poblacion en municipios
test<-subset(test, X2 != "Total" & X3 == "Total" & X4 == "Valor")
# seleccion de variables de estado, municipio y poblacion, para renombrarlas
test<- test %>% select(X1,X2,X5)
colnames(test)<- c("K_ENTIDAD","K_MUNICIPIO","POBLACION")
# Obtiene claves de identificacion de estado y municipio
test$K_ENTIDAD <- substr(test$K_ENTIDAD,1,2)
test$K_MUNICIPIO<- substr(test$K_MUNICIPIO,1,3)
# Crea nueva variable con clave y
test %>% mutate(K_ENTIDAD_MUNICIPIO = paste(K_ENTIDAD, K_MUNICIPIO, sep=""))
library(readxl)
library(tidyverse)
left_path = "Intercensal2015/01_poblacion_"
right_path = ".xls"
name_state = "ags"
# Carga el archivo con el path descrito
test <-read_excel(paste0(left_path,name_state,right_path), sheet = 3, col_names = FALSE, col_types = NULL, na = "", skip = 10)
# Nombres temporales de las variables
colnames(test)<- c("X1","X2","X3","X4","X5","X6","X7")
# Filtrado para obtener datos de poblacion en municipios
test<-subset(test, X2 != "Total" & X3 == "Total" & X4 == "Valor")
# seleccion de variables de estado, municipio y poblacion, para renombrarlas
test<- test %>% select(X1,X2,X5)
colnames(test)<- c("K_ENTIDAD","K_MUNICIPIO","POBLACION")
# Obtiene claves de identificacion de estado y municipio
test$K_ENTIDAD <- substr(test$K_ENTIDAD,1,2)
test$K_MUNICIPIO<- substr(test$K_MUNICIPIO,1,3)
# Crea nueva variable con clave y
test <- test %>% mutate(K_ENTIDAD_MUNICIPIO = paste(K_ENTIDAD, K_MUNICIPIO, sep=""))
test <-test %>% select(K_ENTIDAD_MUNICIPIO, POBLACION)
View(test)
library(readxl)
library(tidyverse)
left_path = "Intercensal2015/01_poblacion_"
right_path = ".xls"
name_state_ags = "ags"
states_list = c("ags","bc","bcs","cam","coah","col","chis","chih","cdmx","dgo","gto","gro","hgo","jal","mex","mich","mor","nay","nl","oax","pue","qro","qroo","slp","sin","son","tab","tamps","tlax","ver"
,"yuc","zac")
cleaning_pop_state<-function(name_state){
# Carga el archivo con el path descrito
test <-read_excel(paste0(left_path,name_state,right_path), sheet = 3, col_names = FALSE, col_types = NULL, na = "", skip = 10)
# Nombres temporales de las variables
colnames(test)<- c("X1","X2","X3","X4","X5","X6","X7")
# Filtrado para obtener datos de poblacion en municipios
test<-subset(test, X2 != "Total" & X3 == "Total" & X4 == "Valor")
# seleccion de variables de estado, municipio y poblacion, para renombrarlas
test<- test %>% select(X1,X2,X5)
colnames(test)<- c("K_ENTIDAD","K_MUNICIPIO","POBLACION")
# Obtiene claves de identificacion de estado y municipio
test$K_ENTIDAD <- substr(test$K_ENTIDAD,1,2)
test$K_MUNICIPIO<- substr(test$K_MUNICIPIO,1,3)
# Crea nueva variable con clave y
test <- test %>% mutate(K_ENTIDAD_MUNICIPIO = paste(K_ENTIDAD, K_MUNICIPIO, sep=""))
test <-test %>% select(K_ENTIDAD_MUNICIPIO, POBLACION)
return(test)
}
ccleaning_pop_state(name_state_ags)
cleaning_pop_state(name_state_ags)
rm(name_state)
library(readxl)
library(tidyverse)
left_path = "Intercensal2015/01_poblacion_"
right_path = ".xls"
states_list = c("ags","bc","bcs","cam","coah","col","chis","chih","cdmx","dgo","gto","gro","hgo","jal","mex","mich","mor","nay","nl","oax","pue","qro","qroo","slp","sin","son","tab","tamps","tlax","ver"
,"yuc","zac")
# Funcion para extraer los datos de poblacion
cleaning_pop_state<-function(name_state){
# Carga el archivo con el path descrito
test <-read_excel(paste0(left_path,name_state,right_path), sheet = 3, col_names = FALSE, col_types = NULL, na = "", skip = 10)
# Nombres temporales de las variables
colnames(test)<- c("X1","X2","X3","X4","X5","X6","X7")
# Filtrado para obtener datos de poblacion en municipios
test<-subset(test, X2 != "Total" & X3 == "Total" & X4 == "Valor")
# seleccion de variables de estado, municipio y poblacion, para renombrarlas
test<- test %>% select(X1,X2,X5)
colnames(test)<- c("K_ENTIDAD","K_MUNICIPIO","POBLACION")
# Obtiene claves de identificacion de estado y municipio
test$K_ENTIDAD <- substr(test$K_ENTIDAD,1,2)
test$K_MUNICIPIO<- substr(test$K_MUNICIPIO,1,3)
# Crea nueva variable con clave y
test <- test %>% mutate(K_ENTIDAD_MUNICIPIO = paste(K_ENTIDAD, K_MUNICIPIO, sep=""))
test <-test %>% select(K_ENTIDAD_MUNICIPIO, POBLACION)
return(test)
}
test = cleaning_pop_state("ags")
for (name_state in states_list ){
test <- cbind(test,cleaning_pop_state(name_state))
}
View(test)
library(readxl)
library(tidyverse)
left_path = "Intercensal2015/01_poblacion_"
right_path = ".xls"
states_list = c("ags","bc","bcs","cam","coah","col","chis","chih","cdmx","dgo","gto","gro","hgo","jal","mex","mich","mor","nay","nl","oax","pue","qro","qroo","slp","sin","son","tab","tamps","tlax","ver"
,"yuc","zac")
# Funcion para extraer los datos de poblacion
cleaning_pop_state<-function(name_state){
# Carga el archivo con el path descrito
test <-read_excel(paste0(left_path,name_state,right_path), sheet = 3, col_names = FALSE, col_types = NULL, na = "", skip = 10)
# Nombres temporales de las variables
colnames(test)<- c("X1","X2","X3","X4","X5","X6","X7")
# Filtrado para obtener datos de poblacion en municipios
test<-subset(test, X2 != "Total" & X3 == "Total" & X4 == "Valor")
# seleccion de variables de estado, municipio y poblacion, para renombrarlas
test<- test %>% select(X1,X2,X5)
colnames(test)<- c("K_ENTIDAD","K_MUNICIPIO","POBLACION")
# Obtiene claves de identificacion de estado y municipio
test$K_ENTIDAD <- substr(test$K_ENTIDAD,1,2)
test$K_MUNICIPIO<- substr(test$K_MUNICIPIO,1,3)
# Crea nueva variable con clave y
test <- test %>% mutate(K_ENTIDAD_MUNICIPIO = paste(K_ENTIDAD, K_MUNICIPIO, sep=""))
test <-test %>% select(K_ENTIDAD_MUNICIPIO, POBLACION)
return(test)
}
test = cleaning_pop_state("ags")
for (name_state in states_list ){
test <- rbind(test,cleaning_pop_state(name_state))
}
View(test)
View(test)
test<-union(test)
test<-unique(test)
View(test)
library(readxl)
library(tidyverse)
left_path = "Intercensal2015/01_poblacion_"
right_path = ".xls"
states_list = c("ags","bc","bcs","cam","coah","col","chis","chih","cdmx","dgo","gto","gro","hgo","jal","mex","mich","mor","nay","nl","oax","pue","qro","qroo","slp","sin","son","tab","tamps","tlax","ver"
,"yuc","zac")
# Funcion para extraer los datos de poblacion
cleaning_pop_state<-function(name_state){
# Carga el archivo con el path descrito
test <-read_excel(paste0(left_path,name_state,right_path), sheet = 3, col_names = FALSE, col_types = NULL, na = "", skip = 10)
# Nombres temporales de las variables
colnames(test)<- c("X1","X2","X3","X4","X5","X6","X7")
# Filtrado para obtener datos de poblacion en municipios
test<-subset(test, X2 != "Total" & X3 == "Total" & X4 == "Valor")
# seleccion de variables de estado, municipio y poblacion, para renombrarlas
test<- test %>% select(X1,X2,X5)
colnames(test)<- c("K_ENTIDAD","K_MUNICIPIO","POBLACION")
# Obtiene claves de identificacion de estado y municipio
test$K_ENTIDAD <- substr(test$K_ENTIDAD,1,2)
test$K_MUNICIPIO<- substr(test$K_MUNICIPIO,1,3)
# Crea nueva variable con clave y
test <- test %>% mutate(K_ENTIDAD_MUNICIPIO = paste(K_ENTIDAD, K_MUNICIPIO, sep=""))
test <-test %>% select(K_ENTIDAD_MUNICIPIO, POBLACION)
return(test)
}
test = cleaning_pop_state("ags")
for (name_state in states_list ){
test <- rbind(test,cleaning_pop_state(name_state))
}
# Elimina duplicados
test<-unique(test)
write_csv(test,"poblacion2015.csv")
test_hogar <-read_excel(paste0(left_path,"ags",right_path), sheet = 3, col_names = FALSE, col_types = NULL, na = "", skip = 10)
View(test)
View(test_hogar)
left_path = "Intercensal2015/12_hogares_"
right_path = ".xls"
test_hogar <-read_excel(paste0(left_path,"ags",right_path), sheet = 3, col_names = FALSE, col_types = NULL, na = "", skip = 10)
View(test_hogar)
library(readxl)
library(tidyverse)
left_path = "Intercensal2015/12_hogares_"
right_path = ".xls"
states_list = c("ags","bc","bcs","cam","coah","col","chis","chih","cdmx","dgo","gto","gro","hgo","jal","mex","mich","mor","nay","nl","oax","pue","qro","qroo","slp","sin","son","tab","tamps","tlax","ver"
,"yuc","zac")
# Funcion para extraer los datos de poblacion
cleaning_pop_state<-function(name_state){
# Carga el archivo con el path descrito
test <-read_excel(paste0(left_path,name_state,right_path), sheet = 3, col_names = FALSE, col_types = NULL, na = "", skip = 10)
# Nombres temporales de las variables
colnames(test)<- c("X1","X2","X3","X4","X5","X6","X7","X8","X9","X10","X11","X12","X13","X14","X15")
# Filtrado para obtener datos de poblacion en municipios
test<-subset(test, X2 != "Total" & X3 == "Total" & X4 == "Hogares"& X5 == "Valor")
# seleccion de variables de estado, municipio y poblacion, para renombrarlas
test<- test %>% select(X1,X2,X6)
colnames(test)<- c("K_ENTIDAD","K_MUNICIPIO","HOGARES")
# Obtiene claves de identificacion de estado y municipio
test$K_ENTIDAD <- substr(test$K_ENTIDAD,1,2)
test$K_MUNICIPIO<- substr(test$K_MUNICIPIO,1,3)
# Crea nueva variable con clave y
test <- test %>% mutate(K_ENTIDAD_MUNICIPIO = paste(K_ENTIDAD, K_MUNICIPIO, sep=""))
test <-test %>% select(K_ENTIDAD_MUNICIPIO, HOGARES)
return(test)
}
test_hogares = cleaning_pop_state("ags")
for (name_state in states_list ){
test_hogares <- rbind(test_hogares,cleaning_pop_state(name_state))
}
# Elimina duplicados
test_hogares<-unique(test_hogares)
write_csv(test_hogares,"hogares2015.csv")
View(test_hogares)
sum(test_hogares$HOGARES)
View(test)
sum(test$POBLACION)
