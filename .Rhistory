stat_function(fun = dbeta, args = list(shape1 = a, shape2 = b), #inicial
aes(colour = "inicial"), show.legend = FALSE) +
stat_function(fun = dbeta, args = list(shape1 = z + 1, shape2 = N - z + 1), #verosimilitud
aes(colour = "verosimilitud"), show.legend = FALSE) +
stat_function(fun = dbeta, args = list(shape1 = a + z, shape2 = N - z + b), #posterior
aes(colour = "posterior"), show.legend = FALSE) +
labs(y = "", colour = "", x = expression(theta))
N = 14; z = 11; a = 100; b = 100
p2 <- base +
stat_function(fun = dbeta, args = list(shape1 = a, shape2 = b),
aes(colour = "inicial")) +
stat_function(fun = dbeta, args = list(shape1 = z + 1, shape2 = N - z + 1),
aes(colour = "verosimilitud")) +
stat_function(fun = dbeta, args = list(shape1 = a + z, shape2 = N - z + b),
aes(colour = "posterior")) +
labs(y = "", colour = "", x = expression(theta))
grid.arrange(p1, p2, nrow = 1, widths = c(0.38, 0.62))
library(gridExtra)
library(grid)
N = 14; z = 11; a = 1; b = 1
base <- ggplot(data_frame(x = c(0, 1)), aes(x))
p1 <- base +
stat_function(fun = dbeta, args = list(shape1 = a, shape2 = b), #inicial
aes(colour = "inicial"), show.legend = FALSE) +
stat_function(fun = dbeta, args = list(shape1 = z + 1, shape2 = N - z + 1), #verosimilitud
aes(colour = "verosimilitud"), show.legend = FALSE) +
stat_function(fun = dbeta, args = list(shape1 = a + z, shape2 = N - z + b), #posterior
aes(colour = "posterior"), show.legend = FALSE) +
labs(y = "", colour = "", x = expression(theta))
N = 14; z = 11; a = 100; b = 100
p2 <- base +
stat_function(fun = dbeta, args = list(shape1 = a, shape2 = b),
aes(colour = "inicial")) +
stat_function(fun = dbeta, args = list(shape1 = z + 1, shape2 = N - z + 1),
aes(colour = "verosimilitud")) +
stat_function(fun = dbeta, args = list(shape1 = a + z, shape2 = N - z + b),
aes(colour = "posterior")) +
labs(y = "", colour = "", x = expression(theta))
grid.arrange(p1, p2, nrow = 1, widths = c(0.38, 0.62))
View(p1)
p1
p2
grid.arrange(p1, p2, nrow = 1, widths = c(0.38, 0.62))
library(shiny); runApp('/media/Box/Aprendizaje_Maquina/Projecto/BAF_shiny.R')
beta(1,1)
beta(0.4,0.9)
choose(66,64)
devtools::install_github('diegovalle/mxmaps')
install.packages(c("bayesm", "bayestestR", "callr", "covr", "data.table", "digest", "DT", "funModeling", "future", "ggvis", "haven", "hexbin", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "insight", "jomo", "kernlab", "knitr", "later", "pkgbuild", "plotly", "promises", "purrr", "qvcalc", "R6", "RcppArmadillo", "rlang", "rmarkdown", "roxygen2", "rvest", "shiny", "sp", "testthat", "tinytex", "xfun"))
install.packages(c("bayesm", "bayestestR", "callr", "covr", "data.table", "digest", "DT", "funModeling", "future", "ggvis", "haven", "hexbin", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "insight", "jomo", "kernlab", "knitr", "later", "pkgbuild", "plotly", "promises", "purrr", "qvcalc", "R6", "RcppArmadillo", "rlang", "rmarkdown", "roxygen2", "rvest", "shiny", "sp", "testthat", "tinytex", "xfun"))
install.packages(c("bayesm", "bayestestR", "callr", "covr", "data.table", "digest", "DT", "funModeling", "future", "ggvis", "haven", "hexbin", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "insight", "jomo", "kernlab", "knitr", "later", "pkgbuild", "plotly", "promises", "purrr", "qvcalc", "R6", "RcppArmadillo", "rlang", "rmarkdown", "roxygen2", "rvest", "shiny", "sp", "testthat", "tinytex", "xfun"))
install.packages(c("bayesm", "bayestestR", "callr", "covr", "data.table", "digest", "DT", "funModeling", "future", "ggvis", "haven", "hexbin", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "insight", "jomo", "kernlab", "knitr", "later", "pkgbuild", "plotly", "promises", "purrr", "qvcalc", "R6", "RcppArmadillo", "rlang", "rmarkdown", "roxygen2", "rvest", "shiny", "sp", "testthat", "tinytex", "xfun"))
devtools::install_github('diegovalle/mxmaps')
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
devtools::install_github('diegovalle/mxmaps')
install.packages("tidyverse")
devtools::install_github('diegovalle/mxmaps')
install.packages("devtools")
devtools::install_github('diegovalle/mxmaps')
library(mxmaps)
install.packages(c("R2OpenBUGS", "R2jags"))
install.packages("corrplot")
sample?
)
?sample
sample(1:10, replace = FALSE)
sample(1:14,1, replace = FALSE)
sample(1:14,1, replace = FALSE)
sample(1:14,1, replace = FALSE)
sample(1:14,1, replace = FALSE)
library(shiny)
library(plotly)
library(ggplot2)
library(dplyr)
library(tidyverse)
# Para ejectuar este archivo, por favor situarse en la ruta donde esta el archivo csv con los datos
# Cargamos los datos limpios
df <- read_csv("BAF_06209_P2.csv")
runApp('/media/Box/Aprendizaje_Maquina/Projecto/BAF_shiny.R')
BAF_06209_P2 <- read_csv("/media/Box/Aprendizaje_Maquina/Projecto/BAF_06209_P2.csv",
col_types = cols(CLASS_PEN_BAF_HABS_COAXFO = col_character(),
NUM_OPS = col_character()))
View(BAF_06209_P2)
runApp('/media/Box/Aprendizaje_Maquina/Projecto/BAF_shiny.R')
runApp('/media/Box/Aprendizaje_Maquina/Projecto/BAF_shiny.R')
glimpse(df)
library(tidyverse)
library(shiny)
library(plotly)
library(ggplot2)
library(dplyr)
library(tidyverse)
# Para ejectuar este archivo, por favor situarse en la ruta donde esta el archivo csv con los datos
# Cargamos los datos limpios
df <- read_csv("/media/Box/Aprendizaje_Maquina/Projecto/BAF_06209_P2.csv",
col_types = cols(CLASS_PEN_BAF_HABS_COAXFO = col_character(),
NUM_OPS = col_character()))
View(df)
glimpse(df)
runApp('/media/Box/Aprendizaje_Maquina/Projecto/BAF_shiny.R')
runApp('/media/Box/Aprendizaje_Maquina/Projecto/BAF_shiny.R')
runApp('/media/Box/Aprendizaje_Maquina/Projecto/BAF_shiny.R')
df1 <- read_csv("/media/Box/Aprendizaje_Maquina/Projecto/BAF_06209_P2.csv")
glimpse(df1)
runApp('/media/Box/Aprendizaje_Maquina/Projecto/BAF_shiny.R')
1
runApp('/media/Box/Aprendizaje_Maquina/Projecto/BAF_shiny.R')
1
ggplot(df, aes(x = df1$DENS_HOGS, y = df1$CLASS_PEN_BAF_HABS_COAXFO)) +
geom_boxplot()
ggplot(df, aes(x =df1$CLASS_PEN_BAF_HABS_COAXFO , y = df1$DENS_HOGS)) +
geom_boxplot()
df1$CLASS_PEN_BAF_HABS_COAXFO <- as.character(df1$CLASS_PEN_BAF_HABS_COAXFO)
df1$IS_PEN_BAF_HABS_COAXFO <- as.character(df1$IS_PEN_BAF_HABS_COAXFO)
df1$NUM_OPS <- as.character(df1$NUM_OPS)
ggplot(df1, aes(x =df1$CLASS_PEN_BAF_HABS_COAXFO , y = df1$DENS_HOGS), gi) +
geom_boxplot() + theme_void()
ggplot(df1, aes(x =df1$CLASS_PEN_BAF_HABS_COAXFO ,
y = df1$DENS_HOGS,fill= df1$CLASS_PEN_BAF_HABS_COAXFO)) +
geom_boxplot() + theme_void()
ggplot(df1, aes(x =df1$CLASS_PEN_BAF_HABS_COAXFO ,
y = df1$DENS_HOGS,fill= df1$CLASS_PEN_BAF_HABS_COAXFO)) +
geom_boxplot() + theme_void() + theme(legend.position="Hola")
ggplot(df1, aes(x =df1$CLASS_PEN_BAF_HABS_COAXFO ,
y = df1$DENS_HOGS,fill= df1$CLASS_PEN_BAF_HABS_COAXFO)) +
geom_boxplot() + theme_classic() + theme(legend.position="Hola")
ggplot(df1, aes(x =df1$CLASS_PEN_BAF_HABS_COAXFO ,
y = df1$DENS_HOGS,fill= df1$CLASS_PEN_BAF_HABS_COAXFO)) +
geom_boxplot() + theme_classic() + theme(legend.position="Hola")
ggplot(df1, aes(x =df1$CLASS_PEN_BAF_HABS_COAXFO ,
y = df1$DENS_HOGS,fill= df1$CLASS_PEN_BAF_HABS_COAXFO)) +
geom_boxplot() + ttheme_linedraw() + theme(legend.position="Hola")
ggplot(df1, aes(x =df1$CLASS_PEN_BAF_HABS_COAXFO ,
y = df1$DENS_HOGS,fill= df1$CLASS_PEN_BAF_HABS_COAXFO)) +
geom_boxplot() + theme_linedraw() + theme(legend.position="Hola")
ggplot(df1, aes(x =df1$CLASS_PEN_BAF_HABS_COAXFO ,
y = log(df1$DENS_HOGS),fill= df1$CLASS_PEN_BAF_HABS_COAXFO)) +
geom_boxplot() + theme_linedraw() + theme(legend.position="Hola")
ggplot(df1, aes(x =df1$CLASS_PEN_BAF_HABS_COAXFO ,
y = log(df1$DENS_HABS),fill= df1$CLASS_PEN_BAF_HABS_COAXFO)) +
geom_boxplot() + theme_linedraw() + theme(legend.position="Hola")
ggplot(df1, aes(x =df1$CLASS_PEN_BAF_HABS_COAXFO ,
y = log(df1$DENS_HABS), color= df1$CLASS_PEN_BAF_HABS_COAXFO)) +
geom_boxplot() + theme_linedraw() + theme(legend.position="Hola")
ggplot(df1, aes(x =df1$CLASS_PEN_BAF_HABS_COAXFO ,
y = df1$INGRESOPC_ANUAL, color= df1$CLASS_PEN_BAF_HABS_COAXFO)) +
geom_boxplot() + theme_linedraw() + theme(legend.position="Hola")
ggplot(df1, aes(x =df1$CLASS_PEN_BAF_HABS_COAXFO ,
y = df1$INGRESOPC_ANUAL, color= df1$CLASS_PEN_BAF_HABS_COAXFO)) +
geom_boxplot() + theme_classic() +
labs(x= "Nivel de penetracion de BAF", y = "Ingreso anual per capita (USD, en poder de paridad de compra)", title = "Relación penetracion e ingreso anual")
ggplot(df1, aes(x =df1$CLASS_PEN_BAF_HABS_COAXFO ,
y = df1$INGRESOPC_ANUAL, color= df1$CLASS_PEN_BAF_HABS_COAXFO)) +
geom_boxplot() + theme_classic() +
labs(x= "Nivel de penetracion de BAF", y = "Ingreso anual per capita \n (USD, en poder de paridad de compra)", title = "Relación penetracion e ingreso anual")
ggplot(df1, aes(x =df1$CLASS_PEN_BAF_HABS_COAXFO ,
y = df1$INGRESOPC_ANUAL, color= df1$CLASS_PEN_BAF_HABS_COAXFO)) +
geom_boxplot() + theme_classic(legend.position = "none") +
labs(x= "Nivel de penetracion de BAF", y = "Ingreso anual per capita \n (USD, en ppc)", title = "Relación penetracion e ingreso anual")
ggplot(df1, aes(x =df1$CLASS_PEN_BAF_HABS_COAXFO ,
y = df1$INGRESOPC_ANUAL, color= df1$CLASS_PEN_BAF_HABS_COAXFO)) +
geom_boxplot() + theme_classic() + theme(legend.title = element_blank()) +
labs(x= "Nivel de penetracion de BAF", y = "Ingreso anual per capita \n (USD, en ppc)", title = "Relación penetracion e ingreso anual")
ggplot(df1, aes(x =df1$CLASS_PEN_BAF_HABS_COAXFO ,
y = df1$INGRESOPC_ANUAL, color= df1$CLASS_PEN_BAF_HABS_COAXFO)) +
geom_boxplot() + theme_classic() + theme(legend.title = element_blank()) +
labs(x= "Nivel de penetracion de BAF", y = "Ingreso anual per capita (USD, en ppc)", title = "Relación penetracion e ingreso anual")
ggplot(df1, aes(x =df1$CLASS_PEN_BAF_HABS_COAXFO ,
y = df1$INGRESOPC_ANUAL, color= df1$CLASS_PEN_BAF_HABS_COAXFO)) +
geom_boxplot() + theme_classic() + theme(legend.title = element_blank()) +
scale_y_continuous(labels=dollar_format(prefix="$"))+
labs(x= "Nivel de penetracion de BAF", y = "Ingreso anual per capita (USD, en ppc)", title = "Relación penetracion e ingreso anual")
ggplot(df1, aes(x =df1$CLASS_PEN_BAF_HABS_COAXFO ,
y = df1$INGRESOPC_ANUAL, color= df1$CLASS_PEN_BAF_HABS_COAXFO)) +
geom_boxplot() + theme_classic() + theme(legend.title = element_blank()) +
labs(x= "Nivel de penetracion de BAF", y = "Ingreso anual per capita (USD, en ppc)", title = "Relación penetracion e ingreso anual")
ggplot(df1, aes(x =df1$CLASS_PEN_BAF_HABS_COAXFO ,
y = df1$INGRESOPC_ANUAL, color= df1$CLASS_PEN_BAF_HABS_COAXFO)) +
geom_boxplot() + theme_classic() + theme(legend.title = element_blank(), legend.position = element_blank()) +
scale_x_discrete(name ="Penetración BAF", limits=c("Nula","Baja","Media", "Alta", "Muy Alta"))+
labs(y = "Ingreso anual per capita (USD, en ppc)", title = "Relación penetracion e ingreso anual")
ggplot(df1, aes(x =df1$CLASS_PEN_BAF_HABS_COAXFO ,
y = df1$INGRESOPC_ANUAL, color= df1$CLASS_PEN_BAF_HABS_COAXFO)) +
geom_boxplot() + theme_classic() + theme(legend.title = element_blank()) + theme(legend.position = "none")+
scale_x_discrete(name ="Penetración BAF", limits=c("Nula","Baja","Media", "Alta", "Muy Alta"))+
labs(y = "Ingreso anual per capita (USD, en ppc)", title = "Relación penetracion e ingreso anual")
ggplot(df1, aes(x =df1$CLASS_PEN_BAF_HABS_COAXFO ,
y = df1$INGRESOPC_ANUAL, color= df1$CLASS_PEN_BAF_HABS_COAXFO)) +
geom_boxplot() + theme_classic() + theme(legend.title = element_blank())+ guides(fill=FALSE)+
scale_x_discrete(name ="Penetración BAF", limits=c("Nula","Baja","Media", "Alta", "Muy Alta"))+
labs(y = "Ingreso anual per capita (USD, en ppc)", title = "Relación penetracion e ingreso anual")
ggplot(df1, aes(x =df1$CLASS_PEN_BAF_HABS_COAXFO ,
y = df1$INGRESOPC_ANUAL, color= df1$CLASS_PEN_BAF_HABS_COAXFO)) +
geom_boxplot() + theme_classic() + theme(legend.title = element_blank())+
scale_x_discrete(name ="Penetración BAF", limits=c("Nula","Baja","Media", "Alta", "Muy Alta"))+
labs(y = "Ingreso anual per capita (USD, en ppc)", title = "Relación penetracion e ingreso anual")
ggplot(df1, aes(x =df1$CLASS_PEN_BAF_HABS_COAXFO ,
y = df1$INGRESOPC_ANUAL, color= df1$CLASS_PEN_BAF_HABS_COAXFO)) +
geom_boxplot() + theme_classic() + theme(legend.title = element_blank())+
#scale_x_discrete(name ="Penetración BAF", limits=c("Nula","Baja","Media", "Alta", "Muy Alta"))+
labs(y = "Ingreso anual per capita (USD, en ppc)", title = "Relación penetracion e ingreso anual")
ggplot(df1, aes(x =df1$CLASS_PEN_BAF_HABS_COAXFO ,
y = df1$INGRESOPC_ANUAL, color= df1$CLASS_PEN_BAF_HABS_COAXFO)) +
geom_boxplot() + theme_classic() + theme(legend.title = element_blank())+
bp + theme(legend.position="none")+
#scale_x_discrete(name ="Penetración BAF", limits=c("Nula","Baja","Media", "Alta", "Muy Alta"))+
labs(y = "Ingreso anual per capita (USD, en ppc)", title = "Relación penetracion e ingreso anual")
ggplot(df1, aes(x =df1$CLASS_PEN_BAF_HABS_COAXFO ,
y = df1$INGRESOPC_ANUAL, color= df1$CLASS_PEN_BAF_HABS_COAXFO)) +
geom_boxplot() + theme_classic() + theme(legend.title = element_blank())+
+ theme(legend.position="none")+
#scale_x_discrete(name ="Penetración BAF", limits=c("Nula","Baja","Media", "Alta", "Muy Alta"))+
labs(y = "Ingreso anual per capita (USD, en ppc)", title = "Relación penetracion e ingreso anual")
ggplot(df1, aes(x =df1$CLASS_PEN_BAF_HABS_COAXFO ,
y = df1$INGRESOPC_ANUAL, color= df1$CLASS_PEN_BAF_HABS_COAXFO)) +
geom_boxplot() + theme_classic() + theme(legend.title = element_blank())+
theme(legend.position="none")+
#scale_x_discrete(name ="Penetración BAF", limits=c("Nula","Baja","Media", "Alta", "Muy Alta"))+
labs(y = "Ingreso anual per capita (USD, en ppc)", title = "Relación penetracion e ingreso anual")
ggplot(df1, aes(x =df1$CLASS_PEN_BAF_HABS_COAXFO ,
y = df1$INGRESOPC_ANUAL, color= df1$CLASS_PEN_BAF_HABS_COAXFO)) +
geom_boxplot() + theme_classic() + theme(legend.title = element_blank())+
theme(legend.position="none")+
#scale_x_discrete(name ="Penetración BAF", limits=c("Nula","Baja","Media", "Alta", "Muy Alta"))+
labs(y = "Ingreso anual per capita (USD, en ppc)", title = "Relación penetracion e ingreso anual")+
scale_x_discrete(labels=c("0" = "Nula", "1" = "Baja", "2" = "Media", "3" = "Alta", "4" = "Muy Alta"))
ggplot(df1, aes(x =df1$CLASS_PEN_BAF_HABS_COAXFO ,
y = df1$INGRESOPC_ANUAL, color= df1$CLASS_PEN_BAF_HABS_COAXFO)) +
geom_boxplot() + theme_classic() + theme(legend.title = element_blank())+
theme(legend.position="none")+
#scale_x_discrete(name ="Penetración BAF", limits=c("Nula","Baja","Media", "Alta", "Muy Alta"))+
labs(x = "Penetración BAF" ,y = "Ingreso anual per capita (USD, en ppc)", title = "Relación penetracion e ingreso anual")+
scale_x_discrete(labels=c("0" = "Nula", "1" = "Baja", "2" = "Media", "3" = "Alta", "4" = "Muy Alta"))
View(df1)
library(readr)
library(tidyverse)
library(readxl)
# Establece directorio de trabajo
setwd("/media/Box/Aprendizaje_Maquina/Projecto")
# Crear las bases de datos para trabajar
source("creating_baf.R") # Accesos de banda ancha fija a junio/2019 BIT del IFT
source("creating_conapo.R") # Indice marginacion y porcentaje pob con menos de 2 salarios min, 2015 CONAPO
source("creating_inafed.R") # Superficie de municipios, INAFED
#source("creating_indiceinfraestructura.R")  # Indice infraestructura TII - centro de estudios IFT
source("creating_indicadores_serviciostelecom_viviendas_.R")  # Indicadores de disponiblidad de servicios de telecomunicaciones Encuesta intercensal 2015, INEGI
source("creating_hogares.R") # Hogares por municipios Encuesta intercensal 2015, INEGI
source("creating_poblacion.R") # Poblacion por municipios Encuesta intercensal 2015, INEGI
source("creating_humandevelop_index.R") # Programa de las Naciones Unidas para el Desarrollo (PNUD), datos del Indice de desarollo humano 2015
# Elimina variables auxiliares
rm(index, left_path,name_state,right_path,states_list,cleaning_hog_state,cleaning_pop_state)
# Consolidamos las bases
df <- left_join(hogares2015,poblacion2015, by = "K_ENTIDAD_MUNICIPIO")
df <- left_join(df,conapo, by = "K_ENTIDAD_MUNICIPIO")
df <- left_join(df,INAFED, by = "K_ENTIDAD_MUNICIPIO")
df <- left_join(df,indicadores_servicios2015, by = "K_ENTIDAD_MUNICIPIO")
df <- left_join(df,BAF_062019, by = "K_ENTIDAD_MUNICIPIO")
## El detalle de accesos a nivel municipal con NA se imputa con cero
df <- df %>% mutate_all(~replace(., is.na(.), 0))
df$SUPERFICIE<- as.numeric(df$SUPERFICIE)
df$PO2SM<- as.numeric(df$PO2SM)
# Se eliminan columas sin interes para el analisis
df$K_ENTIDAD<-NULL
df$K_MUNICIPIO<-NULL
df$ANIO<-NULL
df$MES<-NULL
# df1 <- df
# Se cambian algunas variables de caracteres a numericas
# df1 <- df1 %>% select(-K_ENTIDAD_MUNICIPIO,-GM)
df$SPRIM <- as.numeric(df$SPRIM)
df$OVSDE <- as.numeric(df$OVSDE)
df$VHAC <- as.numeric(df$VHAC)
df$OVPT <- as.numeric(df$OVPT)
df$`PL<5000` <- as.numeric(df$`PL<5000`)
# Crea variable de densidad de hogares por kilometros cuadrados
df$DENS_HOGS <- 0
for (i in 1:nrow(df)){
df$DENS_HOGS[i]<- df$HOGARES[i]/df$SUPERFICIE[i]*100
}
# Crea variable de densidad de personas por kilometros cuadrados
#df <- df %>% mutate(DENS_HOGS = df$HOGARES/df$SUPERFICIE)
df$DENS_HABS <- 0
for (i in 1:nrow(df)){
df$DENS_HABS[i]<- df$HOGARES[i]/df$SUPERFICIE[i]*100
}
# Crea variable de penetracion de BAF por cada 100 hogares y la penetracion de cable coaxial + fibra optica
#df <- df %>% mutate(PEN_BAF_HOGS = df$ALL_ACCESS/df$HOGARES*100)
df$PEN_BAF_HOGS_COAXFO <- 0
for (i in 1:nrow(df)){
df$PEN_BAF_HOGS_COAXFO[i]<- df$COAX_FO[i]/df$HOGARES[i]*100
}
# Crea variable de penetracion de BAF por cada 100 habitantes y la penetracion de cable coaxial + fibra optica
#df <- df %>% mutate(PEN_BAF_HABS = df$ALL_ACCESS/df$HOGARES*100)
df$PEN_BAF_HABS_COAXFO <- 0
for (i in 1:nrow(df)){
df$PEN_BAF_HABS_COAXFO[i]<- df$COAX_FO[i]/df$POBLACION[i]*100
}
# Creamos una columna para clasificar los municipios segun su grado de penetracion.
#La clasificación de Penetracion de Fibra Óptica y Cable Coaxial:
# Sin cobertura=0
# Muy baja 0>25%
# Baja 25%>50%
# Media 50%>75%
# Alta 75%>100%
# Muy Alta 100%
df$CLASS_PEN_BAF_HOGS_COAXFO <- 0
for (index in 1:nrow(df)){
df$CLASS_PEN_BAF_HOGS_COAXFO[index] <- if_else(df$PEN_BAF_HOGS_COAXFO[index]==0,0,
if_else(df$PEN_BAF_HOGS_COAXFO[index]<=25,1,
if_else(df$PEN_BAF_HOGS_COAXFO[index]<=50,2,
if_else(df$PEN_BAF_HOGS_COAXFO[index]<=75,3,
if_else(df$PEN_BAF_HOGS_COAXFO[index]<=100,4,5)))))
}
# Creamos una columna para clasificar los municipios segun su grado de penetracion.
#La clasificación de Penetracion de Fibra Óptica y Cable Coaxial:
# Sin cobertura=0
# Muy baja 0>25%
# Baja 25%>50%
# Media 50%>75%
# Alta 75%>100%
# Muy Alta 100%
df$CLASS_PEN_BAF_HABS_COAXFO <- 0
for (index in 1:nrow(df)){
df$CLASS_PEN_BAF_HABS_COAXFO[index] <- if_else(df$PEN_BAF_HABS_COAXFO[index]==0,0,
if_else(df$PEN_BAF_HABS_COAXFO[index]<=10,1,
if_else(df$PEN_BAF_HABS_COAXFO[index]<=20,2,
if_else(df$PEN_BAF_HABS_COAXFO[index]<=30.92,3,4))))
}
df$IS_PEN_BAF_HABS_COAXFO <- 0
for (index in 1:nrow(df)){
df$IS_PEN_BAF_HABS_COAXFO[index] <- if_else(df$CLASS_PEN_BAF_HABS_COAXFO[index]!=0,1,0)
}
#----- Agregamos una columna que nos diga la region socioecnomica a la que pertenece el municipio
RegionesSocioEcono <- read_csv("RegionesSocioEcono.csv",
col_types = cols(NOM_ABRE_ENTIDAD = col_skip(),
NOM_ENTIDAD = col_skip(), NUM = col_skip()))
df <- df %>% mutate(K_ENTIDAD = substr(K_ENTIDAD_MUNICIPIO,1,2))
df <- left_join(df,RegionesSocioEcono, by = "K_ENTIDAD")
df$K_ENTIDAD<-NULL
for (index in 1:nrow(df)){
df$REG_SOCIOECONOM[index] <- if_else(df$REG_SOCIOECONOM[index]=="Centronorte",1,
if_else(df$REG_SOCIOECONOM[index]=="Centrosur",2,
if_else(df$REG_SOCIOECONOM[index]=="Noreste",3,
if_else(df$REG_SOCIOECONOM[index]=="Noroeste",4,
if_else(df$REG_SOCIOECONOM[index]=="Occidente",5,
if_else(df$REG_SOCIOECONOM[index]=="Oriente",6,
if_else(df$REG_SOCIOECONOM[index]=="Sureste",7,8)))))))
}
# Adjuntamos los datos de indices de derechos humanos
df <- left_join(df, hd_index2015, by = "K_ENTIDAD_MUNICIPIO")
# ---- Seleccionamos columnas para el analisis y escribimos la base para Python
df1<- df %>% select(K_ENTIDAD_MUNICIPIO, HOGARES, POBLACION, SUPERFICIE, DENS_HOGS, DENS_HABS,
ANALF, SPRIM, ANOS_PROMEDIO_DE_ESCOLARIDAD,OVSAE, OVSEE, 'PL<5000', PO2SM, INGRESOPC_ANUAL,
DISP_INTERNET, DISP_TV_PAGA, DISP_TEL_CELULAR, DISP_TEL_FIJO,
NUM_OPS, CLASS_PEN_BAF_HABS_COAXFO, IS_PEN_BAF_HABS_COAXFO)
# Base para el problema de detecion de penetracion sin importar el nivel
write_csv(df1, "BAF_06209_P1.csv")
# Base para el problema de detecion del nivel de penetracion
write_csv(df1, "BAF_06209_P2.csv")
# Base completa para EDA
write_csv(df, "BAF_06209_EDA.csv")
#### ---- Intentemos Lasso
#df1 <-df %>% select(-c(NUM_OPS,K_ENTIDAD_MUNICIPIO, IM, GM, CABLE_COAXIAL, FIBRA_OPTICA, SATELITAL, TERRESTRE_FIJO_INALAMBRICO, OTRAS_TECNOLOGIAS, SIN_TECNOLOGIA_ESPECIFICADA, ALL_ACCESS, DSL, COAX_FO, PEN_BAF_HOGS_COAXFO, PEN_BAF_HABS_COAXFO, CLASS_PEN_BAF_HOGS_COAXFO, CLASS_PEN_BAF_HABS_COAXFO, ANOS_ESPERADOS_DE_ESCOLARIZACIÓN, TASA_DE_MORTALIDAD_INFANTIL, INDICE_DE_EDUCACION,INDICE_DE_SALUD, INDICE_DE_INGRESO,IDH))
#df2 <- df %>% select(PEN_BAF_HABS_COAXFO)
#library(glmnet)
#fit = glmnet(as.matrix(df1[!is.na(df1$INGRESOPC_ANUAL),]), as.matrix(df2[!is.na(df1$INGRESOPC_ANUAL),]))
#plot(fit, label=TRUE)
# df1 <- df1 %>% select(ALL_ACCESS,COAX_FO,HOGARES,POBLACION, ANALF, SPRIM, OVSDE,OVSEE, OVSAE, VHAC, OVPT,`PL<5000`,PO2SM,IM)
#df1 <- df1 %>%select(-PEN_CLASS,PEN_CLASS)
#library(corrplot)
#M<-cor(df1)
#corrplot(M, method="circle")#
#corrplot(M, method="number")
library(readr)
library(tidyverse)
library(readxl)
# Establece directorio de trabajo
setwd("/media/Box/Aprendizaje_Maquina/Projecto")
# Crear las bases de datos para trabajar
source("creating_baf.R") # Accesos de banda ancha fija a junio/2019 BIT del IFT
source("creating_conapo.R") # Indice marginacion y porcentaje pob con menos de 2 salarios min, 2015 CONAPO
source("creating_inafed.R") # Superficie de municipios, INAFED
#source("creating_indiceinfraestructura.R")  # Indice infraestructura TII - centro de estudios IFT
source("creating_indicadores_serviciostelecom_viviendas_.R")  # Indicadores de disponiblidad de servicios de telecomunicaciones Encuesta intercensal 2015, INEGI
source("creating_hogares.R") # Hogares por municipios Encuesta intercensal 2015, INEGI
source("creating_poblacion.R") # Poblacion por municipios Encuesta intercensal 2015, INEGI
source("creating_humandevelop_index.R") # Programa de las Naciones Unidas para el Desarrollo (PNUD), datos del Indice de desarollo humano 2015
# Elimina variables auxiliares
rm(index, left_path,name_state,right_path,states_list,cleaning_hog_state,cleaning_pop_state)
# Consolidamos las bases
df <- left_join(hogares2015,poblacion2015, by = "K_ENTIDAD_MUNICIPIO")
df <- left_join(df,conapo, by = "K_ENTIDAD_MUNICIPIO")
df <- left_join(df,INAFED, by = "K_ENTIDAD_MUNICIPIO")
df <- left_join(df,indicadores_servicios2015, by = "K_ENTIDAD_MUNICIPIO")
df <- left_join(df,BAF_062019, by = "K_ENTIDAD_MUNICIPIO")
## El detalle de accesos a nivel municipal con NA se imputa con cero
df <- df %>% mutate_all(~replace(., is.na(.), 0))
df$SUPERFICIE<- as.numeric(df$SUPERFICIE)
df$PO2SM<- as.numeric(df$PO2SM)
# Se eliminan columas sin interes para el analisis
df$K_ENTIDAD<-NULL
df$K_MUNICIPIO<-NULL
df$ANIO<-NULL
df$MES<-NULL
# df1 <- df
# Se cambian algunas variables de caracteres a numericas
# df1 <- df1 %>% select(-K_ENTIDAD_MUNICIPIO,-GM)
df$SPRIM <- as.numeric(df$SPRIM)
df$OVSDE <- as.numeric(df$OVSDE)
df$VHAC <- as.numeric(df$VHAC)
df$OVPT <- as.numeric(df$OVPT)
df$`PL<5000` <- as.numeric(df$`PL<5000`)
# Crea variable de densidad de hogares por kilometros cuadrados
df$DENS_HOGS <- 0
for (i in 1:nrow(df)){
df$DENS_HOGS[i]<- df$HOGARES[i]/df$SUPERFICIE[i]*100
}
# Crea variable de densidad de personas por kilometros cuadrados
#df <- df %>% mutate(DENS_HOGS = df$HOGARES/df$SUPERFICIE)
df$DENS_HABS <- 0
for (i in 1:nrow(df)){
df$DENS_HABS[i]<- df$HOGARES[i]/df$SUPERFICIE[i]*100
}
# Crea variable de penetracion de BAF por cada 100 hogares y la penetracion de cable coaxial + fibra optica
#df <- df %>% mutate(PEN_BAF_HOGS = df$ALL_ACCESS/df$HOGARES*100)
df$PEN_BAF_HOGS_COAXFO <- 0
for (i in 1:nrow(df)){
df$PEN_BAF_HOGS_COAXFO[i]<- df$COAX_FO[i]/df$HOGARES[i]*100
}
# Crea variable de penetracion de BAF por cada 100 habitantes y la penetracion de cable coaxial + fibra optica
#df <- df %>% mutate(PEN_BAF_HABS = df$ALL_ACCESS/df$HOGARES*100)
df$PEN_BAF_HABS_COAXFO <- 0
for (i in 1:nrow(df)){
df$PEN_BAF_HABS_COAXFO[i]<- df$COAX_FO[i]/df$POBLACION[i]*100
}
# Creamos una columna para clasificar los municipios segun su grado de penetracion.
#La clasificación de Penetracion de Fibra Óptica y Cable Coaxial:
# Sin cobertura=0
# Muy baja 0>25%
# Baja 25%>50%
# Media 50%>75%
# Alta 75%>100%
# Muy Alta 100%
df$CLASS_PEN_BAF_HOGS_COAXFO <- 0
for (index in 1:nrow(df)){
df$CLASS_PEN_BAF_HOGS_COAXFO[index] <- if_else(df$PEN_BAF_HOGS_COAXFO[index]==0,0,
if_else(df$PEN_BAF_HOGS_COAXFO[index]<=25,1,
if_else(df$PEN_BAF_HOGS_COAXFO[index]<=50,2,
if_else(df$PEN_BAF_HOGS_COAXFO[index]<=75,3,
if_else(df$PEN_BAF_HOGS_COAXFO[index]<=100,4,5)))))
}
# Creamos una columna para clasificar los municipios segun su grado de penetracion.
#La clasificación de Penetracion de Fibra Óptica y Cable Coaxial:
# Sin cobertura=0
# Muy baja 0>25%
# Baja 25%>50%
# Media 50%>75%
# Alta 75%>100%
# Muy Alta 100%
df$CLASS_PEN_BAF_HABS_COAXFO <- 0
for (index in 1:nrow(df)){
df$CLASS_PEN_BAF_HABS_COAXFO[index] <- if_else(df$PEN_BAF_HABS_COAXFO[index]==0,0,
if_else(df$PEN_BAF_HABS_COAXFO[index]<=10,1,
if_else(df$PEN_BAF_HABS_COAXFO[index]<=20,2,
if_else(df$PEN_BAF_HABS_COAXFO[index]<=30.92,3,4))))
}
df$IS_PEN_BAF_HABS_COAXFO <- 0
for (index in 1:nrow(df)){
df$IS_PEN_BAF_HABS_COAXFO[index] <- if_else(df$CLASS_PEN_BAF_HABS_COAXFO[index]!=0,1,0)
}
#----- Agregamos una columna que nos diga la region socioecnomica a la que pertenece el municipio
RegionesSocioEcono <- read_csv("RegionesSocioEcono.csv",
col_types = cols(NOM_ABRE_ENTIDAD = col_skip(),
NOM_ENTIDAD = col_skip(), NUM = col_skip()))
df <- df %>% mutate(K_ENTIDAD = substr(K_ENTIDAD_MUNICIPIO,1,2))
df <- left_join(df,RegionesSocioEcono, by = "K_ENTIDAD")
df$K_ENTIDAD<-NULL
for (index in 1:nrow(df)){
df$REG_SOCIOECONOM[index] <- if_else(df$REG_SOCIOECONOM[index]=="Centronorte",1,
if_else(df$REG_SOCIOECONOM[index]=="Centrosur",2,
if_else(df$REG_SOCIOECONOM[index]=="Noreste",3,
if_else(df$REG_SOCIOECONOM[index]=="Noroeste",4,
if_else(df$REG_SOCIOECONOM[index]=="Occidente",5,
if_else(df$REG_SOCIOECONOM[index]=="Oriente",6,
if_else(df$REG_SOCIOECONOM[index]=="Sureste",7,8)))))))
}
# Adjuntamos los datos de indices de derechos humanos
df <- left_join(df, hd_index2015, by = "K_ENTIDAD_MUNICIPIO")
# ---- Seleccionamos columnas para el analisis y escribimos la base para Python
df1<- df %>% select(K_ENTIDAD_MUNICIPIO, HOGARES, POBLACION, SUPERFICIE, DENS_HOGS, DENS_HABS,
ANALF, SPRIM, ANOS_PROMEDIO_DE_ESCOLARIDAD,OVSAE, OVSEE, 'PL<5000', PO2SM, INGRESOPC_ANUAL,
DISP_INTERNET, DISP_TV_PAGA, DISP_TEL_CELULAR, DISP_TEL_FIJO,
NUM_OPS, CLASS_PEN_BAF_HABS_COAXFO, IS_PEN_BAF_HABS_COAXFO)
# Base para el problema de detecion de penetracion sin importar el nivel
write_csv(df1, "BAF_06209_P1.csv")
# Base para el problema de detecion del nivel de penetracion
write_csv(df1, "BAF_06209_P2.csv")
# Base completa para EDA
write_csv(df, "BAF_06209_EDA.csv")
#### ---- Intentemos Lasso
#df1 <-df %>% select(-c(NUM_OPS,K_ENTIDAD_MUNICIPIO, IM, GM, CABLE_COAXIAL, FIBRA_OPTICA, SATELITAL, TERRESTRE_FIJO_INALAMBRICO, OTRAS_TECNOLOGIAS, SIN_TECNOLOGIA_ESPECIFICADA, ALL_ACCESS, DSL, COAX_FO, PEN_BAF_HOGS_COAXFO, PEN_BAF_HABS_COAXFO, CLASS_PEN_BAF_HOGS_COAXFO, CLASS_PEN_BAF_HABS_COAXFO, ANOS_ESPERADOS_DE_ESCOLARIZACIÓN, TASA_DE_MORTALIDAD_INFANTIL, INDICE_DE_EDUCACION,INDICE_DE_SALUD, INDICE_DE_INGRESO,IDH))
#df2 <- df %>% select(PEN_BAF_HABS_COAXFO)
#library(glmnet)
#fit = glmnet(as.matrix(df1[!is.na(df1$INGRESOPC_ANUAL),]), as.matrix(df2[!is.na(df1$INGRESOPC_ANUAL),]))
#plot(fit, label=TRUE)
# df1 <- df1 %>% select(ALL_ACCESS,COAX_FO,HOGARES,POBLACION, ANALF, SPRIM, OVSDE,OVSEE, OVSAE, VHAC, OVPT,`PL<5000`,PO2SM,IM)
#df1 <- df1 %>%select(-PEN_CLASS,PEN_CLASS)
#library(corrplot)
#M<-cor(df1)
#corrplot(M, method="circle")#
#corrplot(M, method="number")
